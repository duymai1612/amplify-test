{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","Amplify","configure","awsconfig","App","uploadFile","evt","file","target","files","name","Storage","put","then","setState","post","a","console","log","API","body","id","response","alert","JSON","stringify","get","list","Analytics","record","className","type","onChange","this","onClick","path","React","Component","withAuthenticator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXA0BeA,EAxBG,CACd,mBAAsB,iBACtB,6BAAgC,sDAChC,mBAAsB,iBACtB,kBAAqB,2BACrB,6BAAgC,6BAChC,MAAS,GACT,+BAAkC,iBAClC,2BAA8B,CAC1B,CACI,UAAa,gBACb,OAAU,mBAGlB,uBAA0B,CACtB,CACI,KAAQ,YACR,SAAY,mEACZ,OAAU,oB,QCbtBC,IAAQC,UAAUC,G,IAEZC,E,2MAKJC,WAAa,SAACC,GACZ,IAAMC,EAAOD,EAAIE,OAAOC,MAAM,GACxBC,EAAOH,EAAKG,KAElBC,UAAQC,IAAIF,EAAMH,GAAMM,KAAK,WAC3B,EAAKC,SAAS,CAAEP,KAAMG,O,EAI1BK,K,qBAAO,4BAAAC,EAAA,4DACLC,QAAQC,IAAI,eADP,SAEkBC,MAAIJ,KAAK,YAAa,SAAU,CACrDK,KAAM,CACJC,GAAI,IACJX,KAAM,oBALL,OAECY,EAFD,OAQLC,MAAMC,KAAKC,UAAUH,EAAU,KAAM,IARhC,yC,EAUPI,I,qBAAM,4BAAAV,EAAA,4DACJC,QAAQC,IAAI,eADR,SAEmBC,MAAIO,IAAI,YAAa,mBAFxC,OAEEJ,EAFF,OAGJC,MAAMC,KAAKC,UAAUH,EAAU,KAAM,IAHjC,yC,EAKNK,K,qBAAO,4BAAAX,EAAA,4DACLC,QAAQC,IAAI,eADP,SAEkBC,MAAIO,IAAI,YAAa,YAFvC,OAECJ,EAFD,OAGLC,MAAMC,KAAKC,UAAUH,EAAU,KAAM,IAHhC,yC,mFA3BLM,YAAUC,OAAO,iB,+BAkCjB,OACE,yBAAKC,UAAU,OAAf,eAEE,2CACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAK5B,aAClC,4BAAQ6B,QAASD,KAAKlB,MAAtB,QACA,4BAAQmB,QAASD,KAAKP,KAAtB,OACA,4BAAQQ,QAASD,KAAKN,MAAtB,QAEA,kBAAC,UAAD,CAASQ,KAAK,U,GA7CJC,IAAMC,WAmDTC,8BAAkBlC,GAAK,GChDlBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.99d67bb4.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-southeast-1\",\n    \"aws_cognito_identity_pool_id\": \"ap-southeast-1:ae446d32-ea00-4a44-9e71-10ed6bad2102\",\n    \"aws_cognito_region\": \"ap-southeast-1\",\n    \"aws_user_pools_id\": \"ap-southeast-1_Q5GjHXMrF\",\n    \"aws_user_pools_web_client_id\": \"4q0ndis2slnhm064rg24eivhdk\",\n    \"oauth\": {},\n    \"aws_dynamodb_all_tables_region\": \"ap-southeast-1\",\n    \"aws_dynamodb_table_schemas\": [\n        {\n            \"tableName\": \"duymaiDB-test\",\n            \"region\": \"ap-southeast-1\"\n        }\n    ],\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"duymaiApi\",\n            \"endpoint\": \"https://3vem3jxxml.execute-api.ap-southeast-1.amazonaws.com/test\",\n            \"region\": \"ap-southeast-1\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport './App.css';\n\nimport Amplify, { Analytics, Storage, API } from 'aws-amplify';\nimport awsconfig from './aws-exports';\nimport { withAuthenticator, S3Album } from 'aws-amplify-react'; // or 'aws-amplify-react-native';\n\nAmplify.configure(awsconfig);\n\nclass App extends React.Component {\n  componentDidMount() {\n    Analytics.record('Amplify_CLI');\n  }\n\n  uploadFile = (evt) => {\n    const file = evt.target.files[0];\n    const name = file.name;\n\n    Storage.put(name, file).then(() => {\n      this.setState({ file: name });\n    })\n  }\n\n  post = async () => {\n    console.log('calling api');\n    const response = await API.post('duymaiApi', '/items', {\n      body: {\n        id: '1',\n        name: 'hello amplify!'\n      }\n    });\n    alert(JSON.stringify(response, null, 2));\n  }\n  get = async () => {\n    console.log('calling api');\n    const response = await API.get('duymaiApi', '/items/object/1');\n    alert(JSON.stringify(response, null, 2));\n  }\n  list = async () => {\n    console.log('calling api');\n    const response = await API.get('duymaiApi', '/items/1');\n    alert(JSON.stringify(response, null, 2));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        Hello world!\n        <p> Pick a file</p>\n        <input type=\"file\" onChange={this.uploadFile} />\n        <button onClick={this.post}>POST</button>\n        <button onClick={this.get}>GET</button>\n        <button onClick={this.list}>LIST</button>\n\n        <S3Album path='' />\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(App, true);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}